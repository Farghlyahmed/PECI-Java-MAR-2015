package pe.egcc.eureka.app.view;

import java.beans.PropertyVetoException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import pe.egcc.eureka.app.listener.PanelCriterioListener;
import pe.egcc.eureka.app.model.ClienteBean;
import pe.egcc.eureka.app.util.MyMessage;
import pe.egcc.eureka.app.util.ReportViewInternal;

/**
 *
 * @author Eric Gustavo Coronel Castillo
 * @blog gcoronelc.blogspot.com
 */
public class ClienteReporte extends javax.swing.JInternalFrame implements PanelCriterioListener {

  private List<ClienteBean> listaClientes;

  public ClienteReporte() {
    initComponents();
    panelCriterio.addPanelCriterioListener(this);
    panelCriterio.setBtnNuevoEnabled(false);
    panelCriterio.setBtnEditarEnabled(false);
    panelCriterio.setBtnEliminarEnabled(false);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    panelCriterio = new pe.egcc.eureka.app.view.PanelCriterioClientes();
    panelReporte = new javax.swing.JPanel();

    setClosable(true);
    setIconifiable(true);
    setMaximizable(true);
    setResizable(true);
    setTitle("REPORTE DE CLIENTES");
    addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
      public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
      }
      public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
      }
      public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
      }
      public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
      }
      public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
      }
      public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
      }
      public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
        formInternalFrameOpened(evt);
      }
    });

    panelCriterio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    javax.swing.GroupLayout panelReporteLayout = new javax.swing.GroupLayout(panelReporte);
    panelReporte.setLayout(panelReporteLayout);
    panelReporteLayout.setHorizontalGroup(
      panelReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    panelReporteLayout.setVerticalGroup(
      panelReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 308, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(panelCriterio, javax.swing.GroupLayout.PREFERRED_SIZE, 871, Short.MAX_VALUE)
      .addComponent(panelReporte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(panelCriterio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(panelReporte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
    try {
      this.setMaximum(true);
    } catch (PropertyVetoException ex) {
    }
  }//GEN-LAST:event_formInternalFrameOpened


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private pe.egcc.eureka.app.view.PanelCriterioClientes panelCriterio;
  private javax.swing.JPanel panelReporte;
  // End of variables declaration//GEN-END:variables

  @Override
  public void onNuevaConsulta(List lista) {
    listaClientes = lista;
    try {
      // Usando una colección de datos
      JRBeanCollectionDataSource data;
      data = new JRBeanCollectionDataSource(lista);
      // Los parámetros
      Map pars = new HashMap();
      String logoFile = "/pe/egcc/eureka/app/img/logo.gif";
      InputStream logoStrean = getClass().getResourceAsStream(logoFile);
      pars.put("LOGO", logoStrean);
      // Reporte
      String repoFile = "/pe/egcc/eureka/app/reports/repoClientes02.jrxml";
      InputStream repoJRXML = getClass().getResourceAsStream(repoFile);
      JasperReport repoComp = JasperCompileManager.compileReport(repoJRXML);
      JasperPrint print = JasperFillManager.fillReport(repoComp, pars, data);
      // Visualizando el Reporte
      //JasperViewer viewer = new JasperViewer(print, false);
      //viewer.setTitle("Mi Reporte");
      //viewer.setVisible(true);
      // Visualizando el Reporte
      ReportViewInternal viewer = new ReportViewInternal();
      viewer.setReporte(print);
      viewer.setTitle("LISTADO DE CLIENTES");
      panelReporte.removeAll();
      panelReporte.add(viewer);
      viewer.setMaximum(true);
      viewer.setMaximizable(false);
      viewer.setIconifiable(false);
      viewer.setClosable(false);
      viewer.setVisible(true);
      
    } catch (Exception e) {
      MyMessage.showError(this, e.getMessage());
    }
  }

  @Override
  public void onExportarExcel() {
  }

  @Override
  public void onExportarCSV() {
  }

  @Override
  public void onNuevo() {
  }

  @Override
  public void onEditar() {
  }

  @Override
  public void onEliminar() {
  }

  @Override
  public void onSalir() {
    this.dispose();
  }

  @Override
  public void onExportarPDF() {
  }
}
